# network size
SIZE 3

# connectivity
CONNECTIVITY 1

# number of distinct functions in the system
ENTROPY 10

# the capacity available to each node
CAPACITY 4

# the maximum variation of demand at each cycle
DELTADEMAND 0

# parameters of periodic execution
CYCLES 100
CYCLE SIZE*10000

# parameters of message transfer
# delay values here are relative to cycle length, in percentage,
# eg 50 means half the cycle length, 200 twice the cycle length, etc.
MINDELAY 0
MAXDELAY 0
# drop is a probability, 0<=DROP<=1
DROP 0

random.seed 1234567890
network.size SIZE
simulation.endtime CYCLE*CYCLES
simulation.logtime CYCLE

################### protocols ===========================

protocol.link peersim.core.IdleProtocol

protocol.ff peerfaas.protocol.FaaSForce
protocol.ff.linkable link
protocol.ff.step CYCLE / 10
protocol.ff.transport tr

protocol.urt UniformRandomTransport
protocol.urt.mindelay (CYCLE*MINDELAY)/100
protocol.urt.maxdelay (CYCLE*MAXDELAY)/100

protocol.tr UnreliableTransport
protocol.tr.transport urt
protocol.tr.drop DROP

################### initialization ======================

init.rndlink WireKOut
init.rndlink.k CONNECTIVITY
init.rndlink.protocol link
init.rndlink.undir true

#init.vals LinearDistribution
#init.vals.protocol ff
#init.vals.max SIZE
#init.vals.min 1

init.fc peerfaas.control.FunctionsCatalogInitializer
init.fc.protocol ff
init.fc.entropy ENTROPY
init.fc.capacity CAPACITY

init.sch CDScheduler
init.sch.protocol ff
init.sch.randstart

################ control ==============================

control.dv peerfaas.control.DemandVariation
control.dv.protocol ff
control.dv.step CYCLE / 10
control.dv.delta DELTADEMAND


####################################################################
# Visualization
#
# GUI display during the run
####################################################################

control.jv peerfaas.control.JungVisualizer
control.jv.junggraph_proto jg
control.jv.show_edges true
control.jv.label_nodes true
control.jv.image_dir capture

# Setting scale_shapes false gives small nodes
# Setting scale_shapes true gives nodes with sizes log-scaled by capacity
#   ...but probably need to use longer edge lengths to make
#   this look decent.  Also, will need to be updated if used in
#   scenarios where the bulwark state is enabled
control.jv.scale_shapes false

# Most of the scenario-specific visualization setup has been split out
# into VisualizerTransformers.  Extend this class or a subclass and
# override the appropriate methods to tweak the display.  Start by
# using one of the four below appropriate to the scenario

# (1) Basic Myconet...nodes colored by protocol state (doesn't handle bulwark)
control.jv.transformers peerfaas.common.visualization.VisualizerTransformers