/* Copyright (c) 2014, Paul L. Snyder <paul@pataprogramming.com>,
 * Daniel Dubois, Nicolo Calcavecchia.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * Any later version. It may also be redistributed and/or modified under the
 * terms of the BSD 3-Clause License.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 59
 * Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */


package fungus;

import peersim.cdsim.*;
import peersim.config.*;
import peersim.core.*;
import java.util.*;
import java.util.logging.*;
import org.apache.commons.collections15.*;
import edu.uci.ics.jung.graph.*;
import edu.uci.ics.jung.graph.util.*;

public class LoadBalancer implements CDProtocol {
    private static final String PAR_HYPHADATA_PROTO =
        "network.node.hyphadata_proto";
    private static final String PAR_HYPHALINK_PROTO =
        "network.node.hyphalink_proto";
    private static final String PAR_START_CYCLE = "start_cycle";
    private static final String PAR_PERIOD = "period";

    private static int hyphaDataPid;
    private static int hyphaLinkPid;
    private static int startCycle;
    private static int period;

    private MycoNode myNode = null;

    private static Logger log = Logger.getLogger(LoadBalancer.class.getName());

    public LoadBalancer(String prefix) {
        hyphaDataPid = Configuration.getPid(PAR_HYPHADATA_PROTO);
        hyphaLinkPid = Configuration.getPid(PAR_HYPHALINK_PROTO);
        startCycle = Configuration.getInt(prefix + "." + PAR_START_CYCLE);
        period = Configuration.getInt(prefix + "." + PAR_PERIOD);
    }

    public Object clone() {
        LoadBalancer ret = null;
        try {
            ret = (LoadBalancer) super.clone();
        } catch (CloneNotSupportedException e) {
            // Never happens
        }
        return ret;
    }

    public void balanceWith(MycoNode n) {
        HyphaData data = myNode.getHyphaData();
        HyphaData theirData = n.getHyphaData();

        double myCapacity = data.getCapacity();
        double theirCapacity = theirData.getCapacity();

        int myLength = data.getQueueLength();
        double theirLength = theirData.getQueueLength();

        double scale = (myCapacity + theirCapacity);
        double totalLength = myLength + theirLength;

        double myRatio = myCapacity / scale;
        int myPortion = (int) (totalLength * myRatio);
        int theirPortion = ((int) totalLength) - myPortion;

        Object[] alerts = { myNode, n };

        MessageObserver.loadQueryMessages(2);

        if ((myPortion == myLength) || (myPortion <= myCapacity)
            || (theirPortion <= theirCapacity)) {
            log.log(Level.FINE, "Node" + myNode.getID() + " ("
                    + (int) myCapacity + "/" + myLength
                    + ") is already balanced with node " + n.getID() + " ("
                    + (int) theirCapacity + "/" + (int) theirLength
                    + "), not balancing again", alerts);

        } else if (myPortion < myLength) {
            int toTransfer = myLength - myPortion;
            log.log(Level.FINE, "Node " + myNode.getID() + " ("
                    + (int) myCapacity + "/" + myLength
                    + ") BALANCING by sending " + toTransfer + " jobs to node "
                    + n.getID() + " (" + (int) theirCapacity + "/"
                    + (int) theirLength + ")", alerts);
            data.transferJobs(myNode, n, toTransfer);
            MessageObserver.loadActionMessages(2);
        } else if (myPortion > myLength) {
            int toTransfer = myPortion - myLength;
            log.log(Level.FINE, "Node " + myNode.getID() + " ("
                    + (int) myCapacity + "/" + myLength
                    + ") BALANCING by pulling " + toTransfer
                    + " jobs from node " + n.getID() + " ("
                    + (int) theirCapacity + "/" + (int) theirLength + ")",
                    alerts);
            theirData.transferJobs(n, myNode, toTransfer);
            MessageObserver.loadActionMessages(2);
        } else {
            log.log(Level.WARNING,
                    "SOMETHING UNEXPECTED HAPPENED when "
                    + " attempting to balance node " + myNode.getID()
                    + " (" + (int) myCapacity + "/" + myLength
                    + ") with node " + n.getID() + " ("
                    + (int) theirCapacity + "/" + (int) theirLength
                    + ")", alerts);

        }
    }

    public void nextCycle(Node node, int pid) {

        if (CDState.getCycle() < startCycle || CDState.getCycle() % period != 0)
                return;

        HyphaLink link = (HyphaLink) node.getProtocol(hyphaLinkPid);

        myNode = (MycoNode) node;

        if (!myNode.isUp()) {
            return;
        }

        MycoNode target = link.getRandomSameNeighbor();

        if (target == null) {
            log.log(Level.FINE, "Node " + myNode.getID()
                    + " has no neighbors of the same type; not balancing",
                    myNode);
        } else {
            log.log(Level.FINER, "Node " + myNode.getID() + " balancing with "
                    + target.getID(), new Object[] { myNode, target });
            balanceWith(target);
        }
    }
}
